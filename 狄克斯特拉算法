#创建图
graph = {}
graph['start'] = {}
graph['start']['a'] = 6
graph['start']['b'] = 2

graph['a'] = {}
graph['a']['fin'] = 1

graph['b'] = {}
graph['b']['a'] = 3
graph['b']['fin'] = 5

graph['fin'] = {}

#创建开销表
infinity = float('inf')
costs = {}
costs['a'] = 6
costs['b'] = 2
costs['fin'] = infinity

#创建存储父节点的散列表
parents = {}
parents['a'] = 'start'
parents['b'] = 'start'
parents['fin'] = None

processed = []     #记录已经处理过的节点

def find_lowest_cost_node(costs):
    lowest_cost = float('inf')
    lowest_cost_node = None
    for node in costs:     #遍历所有节点
        cost = costs[node]
        if cost<lowest_cost and node not in processed:   #如果当前节点开销更低且未被处理过
            lowest_cost = cost     #将其视为开销最低的节点
            lowest_cost_node = node
    return lowest_cost_node

node = find_lowest_cost_node(costs)     #在未处理的节点中找出开销最小的节点


while node is None:     #在所有节点被处理过后结束
    cost = costs[node]
    neighbors = graph[node]
    for n in neighbors.keys():     #遍历所有节点的所有邻居
        new_cost = cost + neighbors[n]
        if costs[n] > new_cost:     #如果当前节点前往该邻居更近
            costs[n] = new_cost     #就更新该邻居的开销
            parents[n] = node     #同时将该邻居的父节点设置为当前节点
    processed.append(node)     #将当前节点标记为已处理
    node = find_lowest_cost_node(costs)     #找出要处理的下一个节点，并循环

print(processed)
